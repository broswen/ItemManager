service: itemmanager
frameworkVersion: '2'

plugins:
  - serverless-plugin-typescript
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

  memorySize: 128
  timeout: 3
  stage: dev
  region: us-east-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      Resource:
        - !GetAtt ItemsTable.Arn
        - !GetAtt ReportsTable.Arn
    - Effect: "Allow"
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource:
        - !GetAtt ReportsBucket.Arn
        - !Join [ "/", [!GetAtt ReportsBucket.Arn, "*" ] ]

  environment:
    ITEMSTABLE: !Ref ItemsTable
    REPORTSTABLE: !Ref ReportsTable
    REPORTSBUCKET: !Ref ReportsBucket


functions:
  CreateItem:
    handler: src/lambdas/CreateItem.handler
    events:
      - httpApi:
          path: /item
          method: post

  GetItem:
    handler: src/lambdas/GetItem.handler
    events:
      - httpApi:
          path: /item/{id}
          method: get

  UpdateItem:
    handler: src/lambdas/UpdateItem.handler
    events:
      - httpApi:
          path: /item/{id}
          method: put

  DeleteItem:
    handler: src/lambdas/DeleteItem.handler
    events:
      - httpApi:
          path: /item/{id}
          method: delete

  # BatchCreateItem:
  #   handler: src/lambdas/BatchCreateItem.handler
  #   events:
  #     - httpApi:
  #         path: /items
  #         method: post

  StartReport:
    handler: src/lambdas/reporting/StartReport.handler
    events:
      - httpApi:
          path: /report
          method: post

  GetReportStatus:
    handler: src/lambdas/reporting/GetReportStatus.handler
    events:
      - httpApi:
          path: /report/{id}
          method: get

  GetReportUrl:
    handler: src/lambdas/reporting/GetReportUrl.handler
    events:
      - httpApi:
          path: /report/{id}/url
          method: get

  ReportsStreamWatcher:
    handler: src/lambdas/reporting/ReportsStreamWatcher.handler
    role: !GetAtt ReportsStreamWatcherRole.Arn
    reservedConcurrency: 1
    environment:
      GENERATEREPORTSFN: !Ref GenerateReportStateMachine

  StartGeneratingReport:
    handler: src/lambdas/reporting/steps/StartGeneratingReport.handler

  FinishGeneratingReport:
    handler: src/lambdas/reporting/steps/FinishGeneratingReport.handler

  GenerateReport:
    handler: src/lambdas/reporting/steps/GenerateReport.handler

stepFunctions:
  stateMachines:
    generateReportSfn:
      name: GenerateReportStateMachine
      id: GenerateReportStateMachine
      definition:
        StartAt: startGeneratingReport
        States:
          startGeneratingReport:
            Type: Task
            Resource: !GetAtt StartGeneratingReport.Arn
            Next: generateReport
          generateReport:
            Type: Task
            Resource: !GetAtt GenerateReport.Arn
            Next: finishGeneratingReport
          finishGeneratingReport:
            Type: Task
            Resource: !GetAtt FinishGeneratingReport.Arn
            End: true


# you can add CloudFormation resource templates here
resources:
  - ${file(./cfn-resources/dynamodb.yml)}
  - ${file(./cfn-resources/s3.yml)}
  - ${file(./cfn-resources/iam.yml)}
